{"version":3,"sources":["assets/images/gradient.png","firebase.ts","components/topPage/topHeader.tsx","pages/downloadPage.tsx","components/resultPage/resultImageList.tsx","pages/resultPage.tsx","components/topPage/topMain.tsx","pages/topPage.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","TopHeader","AppBar","position","Toolbar","useStyles","makeStyles","createStyles","root","marginTop","main","textAlign","tileImage","height","width","DownloadPage","keyword","useParams","classes","useState","data","setData","getData","searchWord","a","db","firestore","tileDataRef","collection","searchedData","where","temporaryData","get","docs","map","doc","push","useEffect","className","tile","src","image","alt","title","Button","variant","href","downloadUrl","display","flexWrap","ImageItemList","history","useHistory","snapShot","onClick","ResultPage","useStyle","background","backgroundImage","gradient","paper","marginLeft","marginRight","top","TopMain","setKeyword","Paper","component","onSubmit","IconButton","type","InputBase","placeholder","onChange","event","target","value","TopPage","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6323881f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gradient.167c5dfc.png\";","import firebase from \"firebase/app\";\nimport 'firebase/firestore';\nimport \"firebase/firebase-storage\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyB1cxwzhQfonQofmM7wosHddmduqXe-ipE\",\n  authDomain: \"distribution-site-5044a.firebaseapp.com\",\n  databaseURL: \"https://distribution-site-5044a.firebaseio.com\",\n  projectId: \"distribution-site-5044a\",\n  storageBucket: \"distribution-site-5044a.appspot.com\",\n  messagingSenderId: \"716382884362\",\n  appId: \"1:716382884362:web:7bc7f0fbee3e811e6d85f3\",\n  measurementId: \"G-3TPK76NP2V\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, {FC} from 'react'; \nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar'; \n\nconst TopHeader: FC = () => {\n  return(\n    <AppBar position = \"static\">\n  \t\t<Toolbar>\n         <h2>タイトル</h2>\n\t\t\t</Toolbar>\n \t\t</AppBar>\n  )\n}\n\nexport default TopHeader;","import React, {FC, useEffect, useState} from \"react\";\nimport {useParams} from 'react-router-dom';\nimport Button from \"@material-ui/core/Button\";\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\n\nimport firebase from '../firebase';\nimport TopHeader from \"../components/topPage/topHeader\";\nimport {TileDate} from \"../types/types\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n\t\troot: {\n\t\t\tmarginTop: \"-20px\",\n\t\t},\n\t\tmain: {\n\t\t  textAlign: \"center\",\n\t\t  marginTop: \"5%\",\n\t\t},\n\t\ttileImage: {\n\t\t  height: \"436px\",\n\t\t  width: \"436px\",\n\t\t},\n  })\n);\n\nconst DownloadPage: FC = () => {\n\tconst { keyword } = useParams();\n\tconst classes = useStyles(); \n\tconst [data, setData] = useState<TileDate[]>([]);\n\n\tconst getData = async (searchWord: string | undefined) => {\n    const db = firebase.firestore();\n    const tileDataRef = db.collection(\"tileData\");\n    const searchedData = tileDataRef.where(\"keyword\", \"array-contains\", searchWord);\n    const temporaryData: object[] = [];\n  \n    const snapShot = await searchedData.get();\n  \n    snapShot.docs.map(doc => {\n      temporaryData.push(doc.data());\n    })\n  \n    setData(temporaryData as TileDate[]);\n  }\n\n  useEffect(() => { \n\t\tgetData(keyword);\n\t}, []);\n\n\tconst displayImage = () => {\n\t  return(\n\t\t\t<div>\n\t\t\t\t{data.map((tile) => (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<img className={classes.tileImage} src={tile.image} alt={tile.title} />\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n  \t)\n \t}\n\n \tconst downloadButton = () => { \n   \treturn(\n\t    <div>\n\t      {data.map((tile) => (\n\t        <Button \n\t          variant=\"contained\"  \n\t          href={tile.downloadUrl}\n\t        >\n\t         無料ダウンロード\n\t        </Button>\n\t      ))} \n\n\t    </div>\n  \t)\n\t }\n    \n  return(\n    <div className={classes.root}>\n\t\t\t<TopHeader />\n\t\t\t<div className={classes.main}>\n\t\t\t\t{displayImage()}\n\t\t\t\t{downloadButton()}\n\t\t\t</div>\n    </div>\n  )\n}\n\nexport default DownloadPage;","import React, {FC, useState, useEffect} from \"react\";\nimport {useHistory, useParams} from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport {createStyles, makeStyles} from '@material-ui/core/styles'; \n\nimport firebase from '../../firebase';\nimport {TileDate} from \"../../types/types\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n\t\troot: {\n\t   \tdisplay: \"flex\",\n\t\t  flexWrap: \"wrap\",\n\t\t  width: \"80%\",\n\t\t  textAlign: \"center\",\n\t\t  marginTop: \"2%\",\n\t \t},\n    tileImage: {\n\t   height: \"218px\",\n\t   width: \"218px\",\n\t\t},\n  }),\n);\n\nconst ImageItemList: FC = () => {\n\tconst [data, setData] = useState<TileDate[]>([]);\n\tconst { keyword } = useParams(); \n\tconst classes = useStyles(); \n\tconst history = useHistory(); \n\n\tconst getData = async (searchWord: string | undefined) =>  {\n\t\tconst db = firebase.firestore();\n\t\tconst tileDataRef = db.collection(\"tileData\");\n\t\tconst searchedData = tileDataRef.where(\"keyword\", \"array-contains\", searchWord);        \n\t\tconst snapShot = await searchedData.get();\n\t \tconst temporaryData: object[] = [];\n\n\t\tsnapShot.docs.map(doc => {\n\t\t  temporaryData.push(doc.data());\n\t\t})\n\n\t\tsetData(temporaryData as TileDate[]);\n\n\t}\n\n\tuseEffect(() => {\n    getData(keyword);\n \t});\n    \n  return(\n      <div className={classes.root}>\n      {data.map((tile) => (\n\t\t\t  <div>\n\t\t\t\t\t<Button onClick={() =>history.push(\"/download/\" + tile.title)}>\n\t\t\t\t\t  <img className={classes.tileImage} src={tile.image} alt={tile.title} />\n\t\t\t\t\t</Button>\n\t\t\t\t\t<h3>{tile.title}</h3>\n\t\t\t  </div> \n\t\t\t ))}\n      </div>\n  )\n}\n\nexport default ImageItemList;","import React, {FC} from \"react\";\nimport TopHeader from \"../components/topPage/topHeader\";\nimport ImageItemList from \"../components/resultPage/resultImageList\" \n\nconst ResultPage: FC = () => {\n  return(\n\t\t<div>\n\t\t\t<TopHeader />\n\t\t \t<ImageItemList />\n\t\t</div>\n   )\n}\n\nexport default ResultPage;","import React, {FC, useState} from 'react'; \nimport {createStyles, makeStyles} from '@material-ui/core/styles';\nimport {useHistory} from 'react-router-dom'; \nimport IconButton from '@material-ui/core/IconButton';\nimport InputBase from '@material-ui/core/InputBase'; \nimport Paper from '@material-ui/core/Paper'; \nimport SearchIcon from '@material-ui/icons/Search'; \n\nimport gradient from \"../../assets/images/gradient.png\"; \n\nconst useStyle = makeStyles(() =>\n  createStyles({\n\t  background: {\n\t\t\tbackgroundImage: `url(${gradient})`,\n\t\t\theight: '100vh',\n\t\t},\n\n\t\tpaper: {\n\t\t\tposition: 'relative',\n\t\t\tmarginLeft: \"auto\",\n\t\t\tmarginRight: \"auto\",\n\t\t\ttop: \"33%\",\n\t\t\twidth: \"45%\",\n\t\t}\n\n  }),\n)\n\nconst TopMain: FC = () => {\n\tconst classes = useStyle();\n\tconst [keyword, setKeyword] = useState(\"\");\n\tconst history = useHistory(); \n\n\tconst handleSubmit = () => {\n\t\thistory.push(\"/search/\" + keyword);     \n\t}\n\n \tconst handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n \t\tsetKeyword(event.target.value);  \n\t}\n\n  return(\n  \t<div className={classes.background}>\n    \t<Paper className={classes.paper} component=\"form\" onSubmit={handleSubmit}>\n    \t<IconButton type=\"submit\">\n\t\t\t  <SearchIcon />\n\t\t\t</IconButton>\n\t\t\t<InputBase placeholder=\"無料素材を検索\" onChange={handleChange} />\n      </Paper>\n\t\t</div> \n\n  )\n}\n\nexport default TopMain;","import React, {FC} from \"react\"; \nimport DownloadPage from \"./downloadPage\";\nimport ResultPage from \"./resultPage\";\nimport TopHeader from  \"../components/topPage/topHeader\"; \nimport TopMain from \"../components/topPage/topMain\"; \nimport {\n  BrowserRouter as Router, \n  Switch, \n  Route, \n} from \"react-router-dom\";\n\nconst TopPage: FC = () => {\n  return(\n\t<Router>\n\t  <Switch>\n\t    <Route exact path=\"/\">\n\t      <TopHeader />\n\t      <TopMain />\n\t    </Route> \n\t\t\t<Route path=\"/search/:keyword\" exact> \n\t\t \t\t<ResultPage />\n\t\t\t</Route>\n\t\t\t<Route path=\"/download/:keyword\" exact>\n\t\t\t　　<DownloadPage />\n\t\t\t</Route>\n\t   </Switch> \n\t </Router> \n  );\n}\n\nexport default TopPage;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TopPage from './pages/topPage'; \nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TopPage />, document.getElementById('root')); \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}